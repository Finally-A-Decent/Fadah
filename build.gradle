plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
}

group = 'info.preva1l'
version = "2.8.2"

ext {
    set 'version', rootProject.version.toString()
    set 'configlib_version', configlib_version.toString()
    set 'rhino_version', rhino_version.toString()
    set 'acp2_version', acp2_version.toString()
    set 'jedis_version', jedis_version.toString()
    set 'hikari_version', hikari_version.toString()
    set 'sqlite_version', sqlite_version.toString()
    set 'mysql_version', mysql_version.toString()
    set 'mariadb_version', mariadb_version.toString()
    set 'mongo_version', mongo_version.toString()
    set 'influxdb_version', influxdb_version.toString()
    set 'minimessage_version', minimessage_version.toString()
    set 'mm_platform_version', mm_platform_version.toString()
}

allprojects {
    apply plugin: 'io.github.goooler.shadow'
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    sourceCompatibility = 17
    targetCompatibility = 17

    compileJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:26.0.1'
        compileOnly 'org.projectlombok:lombok:1.18.36'
        annotationProcessor 'org.projectlombok:lombok:1.18.36'
        annotationProcessor 'org.jetbrains:annotations:26.0.1'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.4'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.4'

        testCompileOnly 'org.jetbrains:annotations:26.0.1'
        testCompileOnly 'org.projectlombok:lombok:1.18.36'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        def tokenMap = rootProject.ext.properties
        filesMatching(['**/*.json', '**/plugin.yml']) {
            expand tokenMap
        }
    }
}

subprojects {
    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name.capitalize()}"

    shadowJar {
        destinationDirectory.set(file("$rootDir/target"))
        archiveClassifier.set('')
        //minimize()
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact shadowJar
                artifact(tasks.named('sourceJar'))
                artifact(tasks.named('javadocJar'))
            }
        }
    }

    jar.dependsOn shadowJar
    project.delete "$rootDir/target"
}

logger.lifecycle("Building Fadah ${version}")